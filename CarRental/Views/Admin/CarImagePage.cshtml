@{
    Layout = "_LayoutAdmin";
}
<h1 class="None">Araba Görselleri</h1>
<div id="gridContainer" dx-data-grid="dataGridOptions"></div>
<script type="text/javascript">
    var OrionApp = angular.module('OrionApp', ['dx'])
        .controller('OrionController', function ($scope) {
            var Url = "";
            var settingStore = new DevExpress.data.CustomStore({
                key: "Id",
                load: function () {
                    return sendRequest("/getcarsimage");
                },
                insert: function (values) {
                    return sendRequest("@Url.Action("OrionSave","Admin")", "POST", {
                        values: JSON.stringify(values),
                        tablo: "CarImageGallery"
                    });
                },
                update: function (key, values, tablo) {
                    return sendRequest("@Url.Action("OrionSave","Admin")", "POST", {
                        key: key,
                        values: JSON.stringify(values),
                        tablo: "CarImageGallery"
                    });
                },
                remove: function (key) {
                    return sendRequest("@Url.Action("OrionDelete","Admin")", "POST", {
                        key: key,
                        tablo: "CarImageGallery"
                    });
                }
            });
            $scope.refreshMode = "reshape";
            $scope.requests = [];

            $scope.dataGridOptions = {
                bindingOptions: {
                    "editing.refreshMode": "refreshMode"
                },
                dataSource: settingStore,
                repaintChangesOnly: true,
                showColumnLines: true,
                showRowLines: true,
                rowAlternationEnabled: true,
                showBorders: true,
                filterRow: { visible: true },
                filterPanel: { visible: true },
                headerFilter: { visible: true },
                allowColumnResizing: true,
                columnAutoWidth: true,
                width: "100%",
                paging: {
                    pageSize: 10
                },
                columnChooser: {
                    enabled: false,
                    mode: "dragAndDrop" // or "select"
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [25, 50, 75],
                    showInfo: true
                },
                editing: {
                    mode: "popup",
                    allowUpdating: true,
                    allowDeleting: true,
                    useIcons: true,
                    popup: {
                        title: "Araba Görselleri",
                        showTitle: true,
                        width: "100%",
                        height: "100%",
                        position: {
                            my: "top",
                            at: "top",
                            of: window
                        }
                    },
                    form: {
                        items: [
                            { dataField: "Car.Id", editorType: "dxLookup" },
                            { dataField: "CarSmallImageFile" },
                            { dataField: "CarSmallImage", visible: false }
                        ]
                    }
                },
                onDataErrorOccurred(e) {
                    this.dataErrorMessage = "The server returned an error: " + `"${e.error.httpStatus} => ${e.error.message}".`;
                },
                onEditorPreparing: function (e) {

                    if (e.parentType === "dataRow" && e.dataField === "CarSmallImageFile") {
                        try {

                            e.editorName = "dxFileUploader";
                            e.editorOptions.uploadMode = "instantly";
                            e.editorOptions.name = "myFile";
                            e.editorOptions.uploadUrl = "@Url.Action("UploadFile", "Admin")";
                            e.editorOptions.onUploaded = (args) => {
                                var result = args.request.response;
                                const rowIndex = e.row.rowIndex
                                e.component.cellValue(rowIndex, "CarSmallImage", result);
                                DevExpress.ui.notify("Resim yüklendi", "success", 5000);
                            }
                        } catch (e) {

                        }
                    }
                },
                columns: [
                    {
                        dataField: "Id",
                        caption: "Kayıt No",
                        width: 100
                    },
                    {
                        dataField: "Car.Id",
                        caption: "Araba Adı",
                        lookup: {
                            dataSource:
                            {
                                paginate: true,
                                store: new DevExpress.data.CustomStore({
                                    key: "Id",
                                    loadMode: "raw",
                                    load: function () {
                                        return sendRequest("@Url.Action("GetCars", "Admin")");
                                    }
                                })
                            },
                            valueExpr: "Id",
                            displayExpr: "CarName",
                        },
                        validationRules: [{ type: "required" }],
                        width: 150
                    },
                    {
                        dataField: "CarSmallImage",
                        caption: "Resim",
                        visible: false
                    },
                    {
                        dataField: "CarSmallImageFile",
                        caption: "Resim(750px*380px)",
                        setCellValue: function (rowData, value) {
                            rowData.ProductImage = value[0].name;
                            DevExpress.ui.notify(value[0].name + " başarılı bir şekilde yüklendi.", "success", 2000);
                            //rowData.File = null;
                        },
                        visible: false
                    }],
                onToolbarPreparing: function (e) {
                    var dataGrid = e.component;
                    e.toolbarOptions.items.unshift(
                        {
                            location: "after",
                            widget: "dxButton",
                            options: {
                                icon: "refresh",
                                text: "Yenile",
                                onClick: function () {
                                    dataGrid.refresh();
                                }
                            }
                        },
                        {
                            location: "after",
                            widget: "dxButton",
                            options: {
                                icon: "add",
                                text: "Ekle",
                                onClick: function () {
                                    dataGrid.addRow();
                                }
                            }
                        }
                    );
                },

            };

            $scope.buttonOptions = {
                text: "Clear",
                onClick: function () {
                    $scope.requests = [];
                }
            };


            function sendRequest(url, method, data) {
                var d = $.Deferred();

                method = method || "GET";

                //logRequest(method, url, data);

                $.ajax(url, {
                    method: method || "GET",
                    data: data,
                    cache: false,
                    xhrFields: { withCredentials: true }
                }).done(function (result) {
                    d.resolve(method === "GET" ? result.Data : result.Data);
                }).fail(function (xhr) {
                    d.reject(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
                });

                return d.promise();
            }
        });


    DevExpress.localization.locale(navigator.language || navigator.browserLanguage);


</script>